<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Notes from day to day work</title>
    <link>https://dimchez.com/blog/</link>
    <description>Recent content in Blogs on Notes from day to day work</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 May 2016 15:03:46 +0200</lastBuildDate>
    <atom:link href="https://dimchez.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>StockholmJS meetup talk - Workflow Driven Development</title>
      <link>https://dimchez.com/blog/stockholmjs-meetup-talk---workflow-driven-development/</link>
      <pubDate>Wed, 04 May 2016 15:03:46 +0200</pubDate>
      
      <guid>https://dimchez.com/blog/stockholmjs-meetup-talk---workflow-driven-development/</guid>
      <description>&lt;p&gt;Couple days ago I gave my first ever talk at &lt;a href=&#34;http://www.meetup.com/sthlm-js/events/230511628/&#34;&gt;StockholmJS&lt;/a&gt; meetup. Topic was &amp;ldquo;&lt;em&gt;Workflow Driven Development&lt;/em&gt;&amp;rdquo;. It is about architectural choices we&amp;rsquo;ve made for our new frontend at &lt;a href=&#34;https://www.nordnet.se&#34;&gt;Nordnet&lt;/a&gt; and why we did them. It was great to see how ideas we have for our frontend architecture are also interesting to other developers. I&amp;rsquo;ve got some good feedback and interesting questions afterwards.&lt;/p&gt;

&lt;p&gt;Slides for the talk could be found here - &lt;a href=&#34;http://www.slideshare.net/DmitryDemyankov/workflow-driven-development&#34;&gt;Workflow Driven Development&lt;/a&gt;. Maybe there&amp;rsquo;s even going to be a video of my talk later.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://dimchez.com/img/stockholmjs.jpg&#34; alt=&#34;StockholmJS meetup&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;P.S. Maybe I shouldn&amp;rsquo;t take beer on stage next time.. :P&lt;/em&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Isomorphic JS apps: Babel vs Webpack for server-side code</title>
      <link>https://dimchez.com/blog/isomorphic-js-apps-babel-vs-webpack-for-server-side-code/</link>
      <pubDate>Sat, 02 Apr 2016 19:07:56 +0200</pubDate>
      
      <guid>https://dimchez.com/blog/isomorphic-js-apps-babel-vs-webpack-for-server-side-code/</guid>
      <description>&lt;p&gt;For quite some time now I&amp;rsquo;ve been researching different approaches to creating isomorphic JS applications. There are quite many starter projects on GitHub. Some of them are quite complicated and try to have a solution for every single possible use case. This results in overly complicated setup and steep learning curve to get familiar with the project. Other projects provide only rather basic setup and require a lot of extra work to get them to production like quality.&lt;/p&gt;

&lt;p&gt;When it comes to building and bundling client-side code, &lt;a href=&#34;webpack.github.io&#34;&gt;Webpack&lt;/a&gt; would be quite a common choice. Lots of plugins, extremely flexible setup, loaders for different file types - all this makes Webpack a good choice as a module bundler for client-side code. On the other hand, Webpack configuration tends to become quite complicated as the project grows. Nonetheless, I see handling of client-side code as simple, but not necessarily easy task.&lt;/p&gt;

&lt;p&gt;Handling of server-side code for isomorphic apps doesn&amp;rsquo;t seem all that straightforward to me. Many of isomorphic js applications that I&amp;rsquo;ve looked at on Github are using Webpack for building and bundling server-side as well as client-side code. And this is something I don&amp;rsquo;t completely agree with.&lt;/p&gt;

&lt;p&gt;From one point of view, it&amp;rsquo;s good to have one tool for both client-side and server-side code. Webpack configs for server-side and client-side are still quite different though and tend to get rather complex. But I guess the benefit of using such setup is in having the same approach for handling both client-side and server-side code. What I don&amp;rsquo;t really like though is that server-side code ends up bundled in one file instead of keeping clean folder structure. For client-side there&amp;rsquo;s no option other than building a bundle, but server-side code running in Node doesn&amp;rsquo;t have to end up with lots of Webpack specific code bundled as one file.&lt;/p&gt;

&lt;p&gt;An alternative approach that I think is not that common is handling client-side code with Webpack, but using only &lt;a href=&#34;babeljs.io&#34;&gt;Babel&lt;/a&gt; for the server-side code. This allows server-side code to keep initial folder structure instead of being bundled into one single file. Also with packages like &lt;a href=&#34;https://www.npmjs.com/package/babel-preset-es2015-node4&#34;&gt;babel-preset-es2015-node4&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/babel-preset-es2015-node5&#34;&gt;babel-preset-es2015-node5&lt;/a&gt; it is possible to transpile from ES6 to ES5 only those features that are missing in either Node 4.x or 5.x. Of course, these presets could be used within Webpack build as well.&lt;/p&gt;

&lt;p&gt;Anyway, right now I&amp;rsquo;m leaning towards using only Babel for server-side code. This approach seems cleaner. But for it to be a fair choice based on good reasons and not a gut feeling there has to be some solid comparisons e.g. of performance and/or code and configuration complexity. I&amp;rsquo;m not sure I will have time for those. I think if I&amp;rsquo;ll manage to find good solutions for most of the issues related to isomorphic apps (e.g. handling styles, images, i18n and l10n, routing) then I&amp;rsquo;ll just keep using Babel for server-side code and Webpack (with babel-loader) for client-side code.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ES6 generators and infinite lists</title>
      <link>https://dimchez.com/blog/es6-generators-and-infinite-lists/</link>
      <pubDate>Thu, 24 Mar 2016 14:10:00 +0100</pubDate>
      
      <guid>https://dimchez.com/blog/es6-generators-and-infinite-lists/</guid>
      <description>&lt;p&gt;For the past couple days I&amp;rsquo;ve been working on a WebSocket server using &lt;a href=&#34;https://www.npmjs.com/package/express-ws&#34;&gt;express-ws&lt;/a&gt;. While developing locally I needed a way to mock &lt;a href=&#34;https://api.test.nordnet.se/projects/api/wiki/Feed_API_documentation&#34;&gt;public and private feeds&lt;/a&gt; that our &lt;a href=&#34;https://api.test.nordnet.se/&#34;&gt;API&lt;/a&gt; provides. Since we are already using mock API server while developing locally, having a mock WebSocket server seemed like a good addition.&lt;/p&gt;

&lt;p&gt;WebSocket server should allow client application(s) to login and send subscribe/unsubscribe commands. Once client subscribes to e.g. instrument price feed it should start receiving periodic updates to emulate changing last price and tick timestamp (and possibly other fields as well). Well, setting &lt;code&gt;setInterval()&lt;/code&gt; on each subscription is not a problem. Then I needed a good way to send initial message to the client and generate new price value every time &lt;code&gt;setInterval()&lt;/code&gt; callback executes. First I wanted to return some sort of object representing price feed message and let it have &lt;code&gt;mutate()&lt;/code&gt; method that would update its values. Seemed like a wrong way to do it. Another option is to pass initial message to separate &lt;code&gt;mutate()&lt;/code&gt; function that should be pure and would return new message instance with new values. Better, but still something was itching in the back of my head. And then I realized that what I was looking for was &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Statements/function*&#34;&gt;generators&lt;/a&gt;. This is the code I ended up with for now:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export function* price(instrument) {
  const message = initialMessage(instrument);
  while (true) {
    yield message;
    message.data = mutate(message.data);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I should probably refactor it to generate new instance of &lt;code&gt;message&lt;/code&gt; instead of only replacing &lt;code&gt;data&lt;/code&gt; property, but that can be done later. Code that uses that generator is quite simple as well:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;const prices = price(message.args);
client(prices.next().value);
subscriptions[key] = interval(() =&amp;gt; client(prices.next().value), 1000);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Where &lt;code&gt;client&lt;/code&gt; is a wrapper around &lt;code&gt;ws.send()&lt;/code&gt; and &lt;code&gt;interval&lt;/code&gt; is a wrapper around &lt;code&gt;setInterval()&lt;/code&gt; that returns a callback for clearing that interval.&lt;/p&gt;

&lt;p&gt;So far I&amp;rsquo;m quite happy with implementation and how generators allowed me to solve periodic price updates problem. Essentially, I&amp;rsquo;ve ended up with implementation of an infinite list. I should try using them more in other projects. I guess a good experiment would be replacing promises with generators for async behavior.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SSL for the blog</title>
      <link>https://dimchez.com/blog/ssl-for-the-blog/</link>
      <pubDate>Mon, 21 Mar 2016 21:43:24 +0100</pubDate>
      
      <guid>https://dimchez.com/blog/ssl-for-the-blog/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve decided that it would be good to have this blog running on &lt;code&gt;https://&lt;/code&gt; instead of plain &lt;code&gt;http://&lt;/code&gt;. A friend of mine, &lt;a href=&#34;https://twitter.com/iamstarkov&#34;&gt;Vladimir Starkov&lt;/a&gt;, suggested to look into &lt;a href=&#34;https://www.cloudflare.com&#34;&gt;Cloudfare&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Setting up &lt;code&gt;https://&lt;/code&gt; turned out to be a rather simple task. I&amp;rsquo;ve followed &lt;a href=&#34;https://www.benburwell.com/posts/configuring-cloudflare-universal-ssl/&#34;&gt;this&lt;/a&gt; and &lt;a href=&#34;https://support.cloudflare.com/hc/en-us/articles/200171566-How-do-I-change-my-domain-nameservers-GoDaddy-&#34;&gt;this&lt;/a&gt; guides to get the job done. It seems that some of the configuration options at least on GoDaddy are sort of hidden away. At least I didn&amp;rsquo;t see at first where to change nameservers. Well, I guess that&amp;rsquo;s just because I&amp;rsquo;m really not familiar with their admin panel. Cloudfare&amp;rsquo;s UI is rather nice compared to GoDaddy though. I&amp;rsquo;ve found all I needed to find there quite fast.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mocha-junit-reporter pull request</title>
      <link>https://dimchez.com/blog/mocha-junit-reporter-pull-request/</link>
      <pubDate>Sat, 19 Mar 2016 09:43:30 +0100</pubDate>
      
      <guid>https://dimchez.com/blog/mocha-junit-reporter-pull-request/</guid>
      <description>&lt;p&gt;As follow up to &lt;a href=&#34;http://dimchez.com/blog/running-parallel-end-to-end-tests-in-nightwatchjs-with-mocha-junit-reporter/&#34;&gt;my previous post&lt;/a&gt;, I&amp;rsquo;ve added &lt;a href=&#34;https://github.com/michaelleeallen/mocha-junit-reporter/pull/29&#34;&gt;PR&lt;/a&gt; for &lt;code&gt;mocha-junit-reporter&lt;/code&gt;. Hopefully it will be approved. Otherwise I can create a small wrapper around &lt;code&gt;mocha-junit-reporter&lt;/code&gt; that allows writing test results in different files when executed in parallel. Basically, the only thing that should be modified is &lt;code&gt;filePath&lt;/code&gt; argument in &lt;a href=&#34;https://github.com/michaelleeallen/mocha-junit-reporter/blob/master/index.js#L233&#34;&gt;writeXmlToDisk&lt;/a&gt; function. This should be a rather easy fix.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;UPDATE (21/03/2016): My PR was accepted and version &lt;code&gt;1.10.0&lt;/code&gt; of &lt;code&gt;mocha-junit-reporter&lt;/code&gt; was published. Hopefully during our next sprint I will get some time to setup our Selenium grid to run end-to-end tests in parallel.&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>Running parallel end-to-end tests in NightwatchJS with mocha-junit-reporter</title>
      <link>https://dimchez.com/blog/running-parallel-end-to-end-tests-in-nightwatchjs-with-mocha-junit-reporter/</link>
      <pubDate>Fri, 18 Mar 2016 10:18:43 +0100</pubDate>
      
      <guid>https://dimchez.com/blog/running-parallel-end-to-end-tests-in-nightwatchjs-with-mocha-junit-reporter/</guid>
      <description>&lt;p&gt;For implementation of our end-to-end tests for frontend applications at &lt;a href=&#34;https://www.nordnet.se&#34;&gt;Nordnet&lt;/a&gt; we rely on &lt;a href=&#34;https://nightwatchjs.org&#34;&gt;NightwatchJS&lt;/a&gt;. Tests are executed against &lt;a href=&#34;https://github.com/SeleniumHQ/selenium/wiki/Grid2&#34;&gt;Selenium Grid&lt;/a&gt; which has several nodes running different browsers and operating systems. As the number of tests is growing in each project so does the time it takes to execute those tests. For some projects it might take from half an hour and up to an hour for tests to either succeed or fail. During that time project is stalled in CI environment and cannot be moved further in the delivery pipeline. One obvious solution to this problem was to try to run end-to-end tests in parallel.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://nightwatchjs.org&#34;&gt;NightwatchJS&lt;/a&gt; allows parallel execution of tests in multiple environments (e.g. against different browsers), see &lt;a href=&#34;http://nightwatchjs.org/guide#parallel-running&#34;&gt;Parallel Running&lt;/a&gt; section in &lt;a href=&#34;http://nightwatchjs.org/guide&#34;&gt;NightwatchJS Developer Guide&lt;/a&gt;. Though this is something we need to have as well, it won&amp;rsquo;t increase speed of execution of tests in general. End-to-end tests will still be executed 30+ minutes, just in different browsers at the same time. Since &lt;code&gt;v0.7&lt;/code&gt; however there is a new feature that allows the tests to be run in parallel. From &lt;a href=&#34;http://nightwatchjs.org/guide#parallel-running&#34;&gt;NightwatchJS Parallel Running&lt;/a&gt; documentation:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;the test runner will launch a configurable number of child processes and then distribute the loaded tests over to be ran in parallel.&lt;/p&gt;

&lt;p&gt;Test concurrency is done at the file level. Each test file will fill a test worker slot. Individual tests/steps in a test file will not run concurrently.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the simplest case test workers can be enabled by adding the following in &lt;code&gt;nigthwatch.json&lt;/code&gt; config&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;quot;test_workers&amp;quot;: true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Number of test workers can also be configured. See &lt;a href=&#34;http://nightwatchjs.org/guide#parallel-running&#34;&gt;NightwatchJS docs&lt;/a&gt; for details on how to do it.&lt;/p&gt;

&lt;p&gt;One obvious requirement for implementation of end-to-end tests for this feature to work efficiently is not to put all tests in one file, but to split them up in multiple test files. Then individual test files could be executed by separate test workers.&lt;/p&gt;

&lt;p&gt;This looked promising and I&amp;rsquo;ve started testing this feature on one of our projects. An unfortunate outcome of this testing was that we can&amp;rsquo;t use this feature out-of-the-box with the way our tests are setup, executed and how test results are processed. The problem is that we&amp;rsquo;ve decided to run NightwatchJS tests &lt;a href=&#34;http://nightwatchjs.org/guide#using-mocha&#34;&gt;using Mocha&lt;/a&gt;. Decision was based on a fact that we are using &lt;a href=&#34;http://mochajs.org&#34;&gt;Mocha&lt;/a&gt; to structure our unit tests and it would be good to have same structure in our end-to-end tests as well. For automated build and deployment processes we are using &lt;a href=&#34;https://jenkins-ci.org/&#34;&gt;Jenkins&lt;/a&gt;. To know whether to fail a specific build or mark it as successful Jenkins checks generated JUnit XML test results reports. We are using &lt;a href=&#34;https://github.com/michaelleeallen/mocha-junit-reporter&#34;&gt;mocha-junit-reporter&lt;/a&gt; for generating XML reports for NightwatchJS tests. And this is where the problem is - test results reports are written in the same test-results.xml file. Essentially, the last test worker to complete overrides all test results of previous tests. This makes it impossible to track the status of end-to-end tests.&lt;/p&gt;

&lt;p&gt;What can be done about it? Well, I&amp;rsquo;m working on PR for &lt;a href=&#34;https://github.com/michaelleeallen/mocha-junit-reporter&#34;&gt;mocha-junit-reporter&lt;/a&gt; to be able to specify a hash in a file name. That way each test worker would write test results in its own XML file and then Jenkins would have to evaluate multiple files. Another alternative is to detect that file already exists and append test results instead of overriding file contents. That would be a better option in case Jenkins (or Jenkins JUnit plugin) can&amp;rsquo;t process multiple test results files.&lt;/p&gt;

&lt;p&gt;Stay tuned for more updates on the topic!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using babel-polyfill with Karma, Webpack and ES6</title>
      <link>https://dimchez.com/blog/using-babel-polyfill-with-karma-webpack-and-es6/</link>
      <pubDate>Thu, 17 Mar 2016 20:41:55 +0100</pubDate>
      
      <guid>https://dimchez.com/blog/using-babel-polyfill-with-karma-webpack-and-es6/</guid>
      <description>

&lt;h1 id=&#34;enabling-babel-polyfill-when-running-unit-tests-using-karma-phantomjs-webpack-and-es6:3ee0811567a12162673656903c4fad16&#34;&gt;Enabling babel-polyfill when running unit tests using Karma, PhantomJS, Webpack and ES6&lt;/h1&gt;

&lt;p&gt;Unit tests started failing when &lt;a href=&#34;https://lodash.com/docs#assign&#34;&gt;lodash&amp;rsquo;s assign&lt;/a&gt; was replaced with &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&#34;&gt;Object.assign()&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&#39;undefined&#39; is not a function (evaluating &#39;Object.assign(...)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tests are bundled with Webpack first and then executed using Karma as test runner and PhantomJS.&lt;/p&gt;

&lt;p&gt;Adding the following in &lt;code&gt;karma.config.js&lt;/code&gt; solved the problem:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;files: [
  &#39;node_modules/babel-polyfill/dist/polyfill.js&#39;,
  ...
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hint on how to fix this issue was in &lt;a href=&#34;https://github.com/babel/karma-babel-preprocessor#polyfill&#34;&gt;karma-babel-preprocessor&lt;/a&gt; plugin documentation. Polyfill seems to work fine even though plugin itself is not used in the project.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>